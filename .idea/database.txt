Η αρχική προσέγγιση της βάσης δεδομένων που θα χρησιμοποιηθεί για την εφαρμογή μας:

drop database if exists FixIt;
create database FixIt;
use FixIt;

create table users(
user_id int(11) not null auto_increment,
user_username varchar(255) unique not null,
user_password varchar(255) not null,
user_email varchar(255) unique not null,
user_type enum("customer","professional"),
primary key(user_id)
);

create table customers(
customer_id int(11) not null auto_increment,
customer_FirstName varchar(255) not null,
customer_LastName varchar(255) not null,
address varchar(255) not null,
customer_phone int(11) unique not null,
customer_bonuspoints int(11),
user_id int(11) not null,
primary key(customer_id),
foreign key(user_id) references users(user_id)
on delete cascade on update cascade
);

create table professionals(
professional_id int(11) not null auto_increment,
professional_FirstName varchar(255) not null,
professional_LastName varchar(255) not null,
professional_speciality enum('electrician','plumber','house cleaner','refrigerant','painter','pc technician','thermohydraulic','smith','Plaster Craftsman','Carpet Cleaner','drain technician','pest controller') default null,
professional_phone int(11) unique not null,
professional_bio text not null,
user_id int(11) not null,
primary key(professional_id),
foreign key(user_id) references users(user_id)
on delete cascade on update cascade
);

create table service(
service_id int(11) not null auto_increment,
service_type varchar(255) not null,
service_price varchar(255) not null,
professional_id int(11) not null,
primary key(service_id),
foreign key(professional_id) references professionals(professional_id)
on delete cascade on update cascade
);

create table appointment(
appointment_id int(11) not null auto_increment,
address varchar(255) not null,
BeginDate datetime not null,
EndDate datetime not null,
appointment_status enum("completed","declined","pending","accepted","cancelled") default "pending",
customer_id int(11) not null,
professional_id int(11) not null,
service_id int(11) not null,
primary key(appointment_id),
foreign key(customer_id) references customers(customer_id)
on delete cascade on update cascade,
foreign key(professional_id) references professionals(professional_id)
on delete cascade on update cascade,
foreign key(service_id) references service(service_id)
on delete cascade on update cascade
);

create table review(
review_id int(11) not null auto_increment,
rating int(11) not null,
comments text,
customer_id int(11) not null,
professional_id int(11) not null,
appointment_id int(11) not null,
review_date timestamp default current_timestamp,
primary key(review_id),
foreign key(customer_id) references customers(customer_id)
on delete cascade on update cascade,
foreign key(professional_id) references professionals(professional_id)
on delete cascade on update cascade,
foreign key(appointment_id) references appointment(appointment_id)
on delete cascade on update cascade
);

create table payment(
payment_id int(11) not null auto_increment,
payment_type set("card","cash","bonuspoint"),
customer_id int(11) not null,
professional_id int(11) not null,
appointment_id int(11) not null,
primary key(payment_id),
foreign key(customer_id) references customers(customer_id)
on delete cascade on update cascade,
foreign key(professional_id) references professionals(professional_id)
on delete cascade on update cascade,
foreign key(appointment_id) references appointment(appointment_id)
on delete cascade on update cascade
);

create table bonuspoints(
bonuspoints_id int(11) not null auto_increment,
bonuspoints int(11) default "0",
appointment_id int(11) not null,
customer_id int(11) not null,
primary key(bonuspoints_id),
foreign key(customer_id) references customers(customer_id)
on delete cascade on update cascade,
foreign key(appointment_id) references appointment(appointment_id)
on delete cascade on update cascade
);

create table appointmenthistory(
appointmenthistory_id int(11) not null auto_increment,
appointmenthistory_description text,
customer_id int(11) not null,
appointment_id int(11) not null,
professional_id int(11) not null,
primary key(appointmenthistory_id),
foreign key(customer_id) references customers(customer_id)
on delete cascade on update cascade,
foreign key(professional_id) references professionals(professional_id)
on delete cascade on update cascade,
foreign key(appointment_id) references appointment(appointment_id)
on delete cascade on update cascade
);


-- Εισαγωγή ενός πελάτη
INSERT INTO users (user_username, user_password, user_email, user_type)
VALUES ('testcustomer', 'testcustomer', 'customer@example.com', 'customer');

-- Εισαγωγή ενός επαγγελματία
INSERT INTO users (user_username, user_password, user_email, user_type)
VALUES ('testprofessional', 'testprofessional', 'professional@example.com', 'professional');

INSERT INTO customers (customer_FirstName, customer_LastName, address, customer_phone, customer_bonuspoints, user_id)
VALUES ('John', 'Doe', '123 Test Street', 2101234567, 50, 1);

INSERT INTO professionals (professional_FirstName, professional_LastName, professional_speciality,
    professional_phone, professional_bio, user_id) 
    VALUES (
    'Jane', 'Smith', 'electrician',
    2107654321, 'Experienced electrician for home and office services.', 2
);